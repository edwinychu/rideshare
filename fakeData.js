const faker = require('faker');
const db = require('./Database/dbIndex.js');


//timestamp: write a function that geenerates new data from 1/1/2018-3/1/2018 every hour, every day

//generates 2315 rides per hour for 90 days
let start_unix = 1483228800
let ride_id = 0;
for (let i=1483228800; i<=1491004800; i += 3600) {
  //2315 rides per hour = 55560 rides per day 
  for (let j=0; j<2315; j++) {
    
    let timestamp = Math.random() * ((i+3600) - i) + i;
    let rider_id = Math.floor(Math.random() * (5000000));

    let rider_start_lat = (Math.random() * (-121.75 - -122.75) + -122.75).toFixed(2);
    let rider_start_log = (Math.random() * (37.8 - 36.8) + 36.8).toFixed(2);
    let rider_start = rider_start_lat.toString() + " " + rider_start_log.toString();

    let rider_end_lat = (Math.random() * (-121.75 - -122.75) + -122.75).toFixed(2);
    let rider_end_log = (Math.random() * (37.8 - 36.8) + 36.8).toFixed(2);
    let rider_end = rider_end_lat.toString() + " " + rider_end_log.toString();

    const new_ride = {
      ride_id = ride_id,
      timestamp: timestamp,
      rider_id: rider_id,
      rider_start: rider_start,
      rider_end: rider_end
    }

    //store into unmatched db table


    //generate extra data for matched db table
    let wait_est = Math.floor(Math.random() * (11 - 1) + 1);
    let driver = Math.floor(Math.random() * (5000000));
    let cancelled = Math.floor(Math.random() * (2 - 0) + 0);
    if (cancelled) {
      let cancellation_time = Math.floor(Math.random() * (wait_est-1) + 1);
    } else {
      cancellation_time = 0;
    }

    const matched_ride = {
      ride_id: ride_id,
      timestamp: timestamp,
      rider_id: rider_id,
      rider_start: rider_start,
      rider_end: rider_end,
      wait_est: wait_est,
      driver_id: driver_id,
      cancelled: cancelled,
      cancellation_time: cancellation_time
    }

    //store into matched db table
  }

  ride_id += 1;
  start_unix += 3600;
}



lat: -122.75 - -121.75
log: 36.8 - 37.8

timestamp range: 1483228800 (1/1/2017) - 1491004800 (4/1/2017)


//unmatched rides
1. Ride_ID (1-5 million) (auto generated by cassandra)
2. Timestamp 
3. Rider_ID 
4. Rider Start_Loc_Lat 
5. Rider Start_Loc_Long
6. Rider End_Loc_Lat 
7. Rider End_Loc_Long


//matched rides
1. Ride_ID (1-5 million; same as above)
2. Timestamp (3 month period, day-by-day; same as above)
3. Rider_ID (same as above)
4. Rider Start_Loc_Lat
5. Rider Start_Loc_Long
6. Rider End_Loc_Lat
7. Rider End_Loc_Long
8. Wait_Est
9. Driver_ID
10. Cancelled or Not Cancelled (fake data generated by me)
11. Cancellation_time if cancelled (Handled by my service)

